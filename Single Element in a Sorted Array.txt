/*
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
Return the single element that appears only once.
Your solution must run in O(log n) time and O(1) space.
*/

#include<iostream>
using namespace std;

int finduniqueinsorted(int n,int arr[]){
	int lo=0,hi=n-1;
	if(arr[0]!=arr[1])
	   return arr[0];
	else if(arr[n-1]!=arr[n-1])
	   return arr[n-1];
	   
	while(lo<=hi){
		int mid=lo+(hi-lo)/2;
		if(arr[mid]!=arr[mid-1]&&arr[mid]!=arr[mid+1])
		   return arr[mid];
		else if(arr[mid]==arr[mid-1]){
			int lc=mid-lo+1;
			if(lc%2==0)
			   lo=mid+1;
			else
			   hi=mid-1;
		}
		else if(arr[mid]==arr[mid+1]){
			int rc=hi-mid+1;
			if(rc%2==0)
			  hi=mid-1;
			else
			  lo=mid+1;
		}
	}
	return 0;
}

int main(){
	int n,arr[100];
	cout<<"Enter the size of the array"<<endl;
	cin>>n;
	
	cout<<"Enter the elements in the array"<<endl;
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	
	int unique=finduniqueinsorted(n,arr);
	cout<<unique;
}